{"version":3,"sources":["context.js","components/TodoItem.jsx","components/TodoList.jsx","components/ThemeSwitch.jsx","reducer.js","components/FormInput.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","useState","edit","setEdit","title","editedTodo","setEditedTodo","dispatch","useContext","saveTodo","type","payload","id","className","autoFocus","value","minLength","maxLength","onChange","e","target","onKeyPress","event","key","onBlur","onClick","checked","completed","href","TodoList","todos","map","triggerOnce","initialTheme","localStorage","getItem","JSON","parse","ThemeSwitch","darkMode","setDarkMode","useEffect","setItem","stringify","document","querySelector","setAttribute","removeAttribute","reducer","state","action","Date","now","filter","FormInput","todoTitle","setTodoTitle","addTodo","htmlFor","data-error","data-success","Footer","checkAll","setCheckAll","unfinishedTodos","length","n","text_forms","n1","Math","abs","declOfNum","disabled","initialState","App","useReducer","Provider","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51db3757.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useContext, useState } from 'react';\nimport { Context } from '../context';\n\nexport default function TodoItem({ todo }) {\n  const [edit, setEdit] = useState(false);\n  const [editedTodo, setEditedTodo] = useState(todo.title);\n  const { dispatch } = useContext(Context);\n\n  const saveTodo = () => {\n    setEdit(false);\n    if (editedTodo) {\n      dispatch({\n        type: 'edit',\n        payload: editedTodo,\n        todo,\n      });\n    } else {\n      dispatch({ type: 'remove', payload: todo.id });\n    }\n  };\n\n  const saveHandler = (event) => {\n    if (event.key === 'Enter' && event.target.value) {\n      saveTodo();\n    }\n  };\n\n  if (!edit) {\n    return (\n      <li className='todo'>\n        <label>\n          <input\n            type='checkbox'\n            checked={todo.completed}\n            onChange={() => dispatch({ type: 'toggle', payload: todo.id })}\n          />\n          <span className={todo.completed ? 'completed' : ''}>{todo.title}</span>\n        </label>\n        <div className='icons-group'>\n          <a href={'#edit'} onClick={() => setEdit(true)}>\n            <i className='material-icons'>edit</i>\n          </a>\n          <i\n            className='material-icons red-text'\n            onClick={() => dispatch({ type: 'remove', payload: todo.id })}\n          >\n            delete\n          </i>\n        </div>\n      </li>\n    );\n  } else {\n    return (\n      <li className='todo editable'>\n        <label>\n          <input\n            autoFocus\n            id='edit'\n            className='validate'\n            type='text'\n            value={editedTodo}\n            minLength='1'\n            maxLength='350'\n            onChange={(e) => setEditedTodo(e.target.value)}\n            onKeyPress={saveHandler}\n            onBlur={saveTodo}\n          />\n        </label>\n        <div className='icons-group'>\n          <i className='material-icons edit-icon' onClick={saveTodo}>\n            {editedTodo ? 'save' : 'delete'}\n          </i>\n        </div>\n      </li>\n    );\n  }\n}\n","import React from 'react';\nimport TodoItem from './TodoItem';\nimport { Slide } from 'react-awesome-reveal';\n\nconst TodoList = ({ todos }) => {\n  return (\n    <ul className='todo-list'>\n      {todos.map((todo) => (\n        <Slide triggerOnce key={todo.id}>\n          <TodoItem {...todo} todo={todo} />\n        </Slide>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React, { useEffect, useState } from 'react';\n\nexport const initialTheme =\n  localStorage.getItem('darkMode') == null ? false : JSON.parse(localStorage.getItem('darkMode'));\n\nconst ThemeSwitch = () => {\n  const [darkMode, setDarkMode] = useState(initialTheme);\n\n  useEffect(() => {\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\n    darkMode\n      ? document.querySelector('html').setAttribute('data-theme', 'dark')\n      : document.querySelector('html').removeAttribute('data-theme');\n  }, [darkMode]);\n\n  return (\n    <div className='switch'>\n      <label>\n        <input type='checkbox' checked={darkMode} onChange={() => setDarkMode(!darkMode)} />\n        <span className='lever' />\n        Dark {!darkMode ? 'OFF' : 'ON'}\n      </label>\n    </div>\n  );\n};\n\nexport default ThemeSwitch;\n","export default function reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [\n        ...state,\n        {\n          id: Date.now(),\n          title: action.payload,\n          completed: false,\n        },\n      ];\n\n    case 'toggle':\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n\n    case 'toggleAll':\n      return state.map((todo) => {\n        todo.completed = !action.payload;\n        return todo;\n      });\n\n    case 'edit':\n      return state.map((todo) => {\n        if (todo.id === action.todo.id) {\n          todo.title = action.payload;\n          todo.completed = false;\n          return todo;\n        }\n        return todo;\n      });\n\n    case 'remove':\n      return state.filter((todo) => todo.id !== action.payload);\n\n    case 'removeCompletedTodo':\n      return state.filter((todo) => todo.completed === false);\n\n    default:\n      return state;\n  }\n}\n","import React, { useContext, useState } from 'react';\nimport { Context } from '../context';\n\nconst FormInput = () => {\n  const [todoTitle, setTodoTitle] = useState('');\n\n  const { dispatch } = useContext(Context);\n\n  const addTodo = (e) => {\n    if (todoTitle) {\n      dispatch({\n        type: 'add',\n        payload: todoTitle,\n      });\n      setTodoTitle('');\n    }\n  };\n\n  return (\n    <div className='form-input'>\n      <div className='input-field'>\n        <input\n          id='adding'\n          className='validate'\n          type='text'\n          value={todoTitle}\n          minLength='1'\n          maxLength='350'\n          onChange={(e) => setTodoTitle(e.target.value)}\n          onKeyPress={(e) => (e.key === 'Enter' ? addTodo() : null)}\n        />\n        <label htmlFor='adding'>Чо надо сделать ?</label>\n        <span\n          className='helper-text'\n          data-error='Алло, напиши хоть чёто!'\n          data-success='Давай, добавь себе ещё проблем!'\n        />\n      </div>\n      <div className='icons-group'>\n        <button className='btn-floating btn-large waves-effect' onClick={addTodo}>\n          <i className='material-icons'>add</i>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FormInput;\n","import React, { useContext, useState } from 'react';\nimport { Context } from '../context';\n\nconst Footer = ({ todos }) => {\n  const [checkAll, setCheckAll] = useState(false);\n  const { dispatch } = useContext(Context);\n\n  const unfinishedTodos = todos.filter((todo) => todo.completed === false);\n\n  const handleChangeAll = () => {\n    dispatch({\n      type: 'toggleAll',\n      payload: checkAll,\n    });\n    setCheckAll(!checkAll);\n  };\n\n  const deleteTodos = () => {\n    if (unfinishedTodos) {\n      dispatch({ type: 'removeCompletedTodo' });\n      setCheckAll(false);\n    }\n  };\n\n  const declOfNum = (n, text_forms) => {\n    n = Math.abs(n) % 100;\n    const n1 = n % 10;\n    if (n > 10 && n < 20) {\n      return text_forms[2];\n    }\n    if (n1 > 1 && n1 < 5) {\n      return text_forms[1];\n    }\n    if (n1 === 1) {\n      return text_forms[0];\n    }\n    return text_forms[2];\n  };\n\n  return (\n    <div className='footer-wrapper'>\n      {todos.length === 0 ? (\n        <h6>Поздравляю, вы порешали все свои проблемы, и теперь вам нечего делать!</h6>\n      ) : (\n        <div className='row'>\n          <label className='col s6 m4 l3'>\n            <input className='filled-in' type='checkbox' onChange={handleChangeAll} />\n            <span>Выбрать всe</span>\n          </label>\n          <p className='col s6 m4 l6 center-align'>\n            {unfinishedTodos.length}{' '}\n            {declOfNum(unfinishedTodos.length, ['проблема', 'проблемы', 'проблем'])}\n          </p>\n          <button\n            disabled={unfinishedTodos.length >= todos.length}\n            className='waves-effect waves-light btn-small col s12 m4 l3'\n            onClick={deleteTodos}\n          >\n            Удалить завершенные\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useEffect, useReducer } from 'react';\nimport TodoList from './components/TodoList';\nimport ThemeSwitch from './components/ThemeSwitch';\nimport reducer from './reducer';\nimport { Context } from './context';\nimport FormInput from './components/FormInput';\nimport Footer from './components/Footer';\n\nconst initialState =\n  localStorage.getItem('todos') == null\n    ? [\n        {\n          id: 1,\n          title: 'Добавить себе ещё проблем',\n          completed: false,\n        },\n      ]\n    : JSON.parse(localStorage.getItem('todos'));\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <div className='container'>\n        <h2>Твои проблемы</h2>\n        <ThemeSwitch />\n        <FormInput />\n        <TodoList todos={state} />\n        <Footer todos={state} />\n      </div>\n    </Context.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}