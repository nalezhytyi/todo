{"version":3,"sources":["context.js","components/TodoItem.jsx","components/TodoList.jsx","components/ThemeSwitch.jsx","reducer.js","components/FormInput.jsx","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","useState","edit","setEdit","title","editedTodo","setEditedTodo","dispatch","useContext","cls","completed","push","saveTodo","event","key","target","value","length","type","payload","className","join","minLength","maxLength","onChange","onKeyPress","data-error","data-success","disabled","onClick","checked","id","TodoList","todos","map","direction","triggerOnce","initialTheme","localStorage","getItem","JSON","parse","ThemeSwitch","darkMode","setDarkMode","useEffect","setItem","stringify","document","querySelector","setAttribute","removeAttribute","initialState","Date","now","reducer","state","action","filter","FormInput","todoTitle","setTodoTitle","addTodo","blur","App","useReducer","Provider","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8fb9d7a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useContext, useState } from 'react';\nimport { Context } from '../context';\n\nexport default function TodoItem({ todo }) {\n  const [edit, setEdit] = useState(false);\n  const [editedTodo, setEditedTodo] = useState(todo.title);\n  const { dispatch } = useContext(Context);\n\n  const cls = ['todo'];\n  if (todo.completed) {\n    cls.push('completed');\n  }\n\n  const saveTodo = (event) => {\n    if ((event.key === 'Enter' && event.target.value.length >= 3) || event.type === 'click') {\n      dispatch({\n        type: 'edit',\n        payload: editedTodo,\n        todo,\n      });\n      setEdit(false);\n    }\n  };\n\n  if (!edit) {\n    return (\n      <li className={cls.join(' ')}>\n        <label>\n          <input\n            type='checkbox'\n            checked={todo.completed}\n            onChange={() => dispatch({ type: 'toggle', payload: todo.id })}\n          />\n          <span>{todo.title}</span>\n        </label>\n        <div className='icons-group'>\n          <button\n            className='waves-effect btn-flat btn-floating waves-light'\n            onClick={() => setEdit(true)}\n          >\n            <i className='material-icons'>edit</i>\n          </button>\n          <button\n            className='btn-flat btn-floating'\n            onClick={() => dispatch({ type: 'remove', payload: todo.id })}\n          >\n            <i className='material-icons red-text'>delete</i>\n          </button>\n        </div>\n      </li>\n    );\n  } else {\n    return (\n      <li className={cls.join(' ')}>\n        <label>\n          <input\n            className='validate'\n            type='text'\n            value={editedTodo}\n            minLength='3'\n            maxLength='120'\n            onChange={(event) => setEditedTodo(event.target.value)}\n            onKeyPress={saveTodo}\n          />\n          <span\n            className='helper-text'\n            data-error='Алло, введи минимум 3 символа!'\n            data-success='Нажми Ввод (Return) (Enter) или тыцни кнопку справа!'\n          />\n        </label>\n        <div className='icons-group'>\n          <button\n            className='btn-large btn-flat waves-effect waves-light btn-floating'\n            disabled={editedTodo.length < 3}\n            onClick={(event) => saveTodo(event)}\n          >\n            <i className='material-icons'>save</i>\n          </button>\n        </div>\n      </li>\n    );\n  }\n}\n","import React from 'react';\nimport TodoItem from './TodoItem';\nimport { Slide } from 'react-awesome-reveal';\n\nconst TodoList = ({ todos }) => {\n  return (\n    <ul className='todo-list'>\n      {todos.map((todo) => (\n        <Slide direction='up' triggerOnce key={todo.id}>\n          <TodoItem {...todo} todo={todo} />\n        </Slide>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React, { useEffect, useState } from 'react';\n\nexport const initialTheme =\n  localStorage.getItem('darkMode') == null ? false : JSON.parse(localStorage.getItem('darkMode'));\n\nconst ThemeSwitch = () => {\n  const [darkMode, setDarkMode] = useState(initialTheme);\n\n  useEffect(() => {\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\n    darkMode\n      ? document.querySelector('html').setAttribute('data-theme', 'dark')\n      : document.querySelector('html').removeAttribute('data-theme');\n  }, [darkMode]);\n\n  return (\n    <div className='switch'>\n      <label>\n        <input type='checkbox' checked={darkMode} onChange={() => setDarkMode(!darkMode)} />\n        <span className='lever' />\n        Тёмная сторона\n      </label>\n    </div>\n  );\n};\n\nexport default ThemeSwitch;\n","export const initialState =\n  localStorage.getItem('todos') == null\n    ? [\n        {\n          id: 1,\n          title: 'покакат',\n          completed: false,\n        },\n        {\n          id: Date.now(),\n          title: 'покушат',\n          completed: true,\n        },\n      ]\n    : JSON.parse(localStorage.getItem('todos'));\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [\n        ...state,\n        {\n          id: Date.now(),\n          title: action.payload,\n          completed: false,\n        },\n      ];\n    case 'toggle':\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n    case 'edit':\n      return state.map((todo) => {\n        if (todo.id === action.todo.id) {\n          todo.title = action.payload;\n          return todo;\n        }\n        return todo;\n      });\n    case 'remove':\n      return state.filter((todo) => todo.id !== action.payload);\n    default:\n      return state;\n  }\n}\n","import React, { useContext, useState } from 'react';\nimport { Context } from '../context';\n\nconst FormInput = () => {\n  const [todoTitle, setTodoTitle] = useState('');\n\n  const { dispatch } = useContext(Context);\n\n  const addTodo = (event) => {\n    if ((event.key === 'Enter' && event.target.value.length >= 3) || event.type === 'click') {\n      dispatch({\n        type: 'add',\n        payload: todoTitle,\n      });\n      setTodoTitle('');\n      event.target.blur();\n    }\n  };\n\n  return (\n    <div className='form-input'>\n      <div className='input-field'>\n        <input\n          id='adding'\n          className='validate'\n          type='text'\n          value={todoTitle}\n          minLength='3'\n          maxLength='120'\n          onChange={(event) => setTodoTitle(event.target.value)}\n          onKeyPress={addTodo}\n        />\n        <label>Чо надо сделать ?</label>\n        <span\n          className='helper-text'\n          data-error='Алло, введи минимум 3 символа!'\n          data-success='Хочешь еще проблем?'\n        />\n      </div>\n      <div>\n        <button\n          className='btn-flat btn-floating btn-large waves-effect'\n          onClick={addTodo}\n          disabled={todoTitle.length < 3}\n        >\n          <i className='material-icons'>send</i>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FormInput;\n","import React, { useEffect, useReducer } from 'react';\nimport TodoList from './components/TodoList';\nimport ThemeSwitch from './components/ThemeSwitch';\nimport reducer, { initialState } from './reducer';\nimport { Context } from './context';\nimport FormInput from './components/FormInput';\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <div className='container'>\n        <h1>Твои проблемы</h1>\n        <ThemeSwitch />\n        <FormInput />\n        <TodoList todos={state} />\n      </div>\n    </Context.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}