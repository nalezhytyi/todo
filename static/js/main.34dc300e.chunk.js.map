{"version":3,"sources":["context.js","components/TodoItem.jsx","components/TodoList.jsx","reducer.js","components/ThemeSwitch.jsx","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","title","id","completed","dispatch","useContext","cls","push","className","join","type","checked","onChange","payload","onClick","TodoList","todos","map","item","key","initialState","localStorage","getItem","JSON","parse","reducer","state","action","Date","now","todo","filter","ThemeSwitch","useState","currentTheme","setTheme","useEffect","document","querySelector","setAttribute","removeAttribute","App","useReducer","todoTitle","setTodoTitle","setItem","stringify","Provider","value","minLength","maxLength","event","target","onKeyPress","length","data-error","data-success","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oLAEaA,EAAUC,IAAMC,gBCCd,SAASC,EAAT,GAA6C,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,UACpCC,EAAaC,qBAAWR,GAAxBO,SAEFE,EAAM,CAAC,QAMb,OAJIH,GACFG,EAAIC,KAAK,aAIT,wBAAIC,UAAWF,EAAIG,KAAK,MACtB,+BACE,2BACEC,KAAK,WACLC,QAASR,EACTS,SAAU,kBAAMR,EAAS,CAAEM,KAAM,SAAUG,QAASX,OAEtD,8BAAOD,GAEP,uBACEO,UAAU,0BACVM,QAAS,kBAAMV,EAAS,CAAEM,KAAM,SAAUG,QAASX,MAFrD,YCnBR,IAUea,EAVE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB,OACE,4BACGA,EAAMC,KAAI,SAACC,GAAD,OACT,kBAAClB,EAAD,eAAUmB,IAAKD,EAAKhB,IAAQgB,S,OCPvBE,EACsB,MAAjCC,aAAaC,QAAQ,SAAmB,GAAKC,KAAKC,MAAMH,aAAaC,QAAQ,UAEhE,SAASG,EAAQC,EAAOC,GACrC,OAAQA,EAAOjB,MACb,IAAK,MACH,MAAM,GAAN,mBACKgB,GADL,CAEE,CACExB,GAAI0B,KAAKC,MACT5B,MAAO0B,EAAOd,QACdV,WAAW,KAGjB,IAAK,SACH,OAAOuB,EAAMT,KAAI,SAACa,GAIhB,OAHIA,EAAK5B,KAAOyB,EAAOd,UACrBiB,EAAK3B,WAAa2B,EAAK3B,WAElB2B,KAEX,IAAK,SACH,OAAOJ,EAAMK,QAAO,SAACD,GAAD,OAAUA,EAAK5B,KAAOyB,EAAOd,WACnD,QACE,OAAOa,GCtBb,IA0BeM,EA1BK,WAAO,IAAD,EACSC,mBAAS,SADlB,mBACjBC,EADiB,KACHC,EADG,KAWxB,OARAC,qBAAU,WACa,SAAjBF,EACFG,SAASC,cAAc,QAAQC,aAAa,aAAc,QAE1DF,SAASC,cAAc,QAAQE,gBAAgB,iBAKjD,yBAAKhC,UAAU,UACb,+BACE,2BACEE,KAAK,WACLC,QAA0B,SAAjBuB,EACTtB,SAAU,kBAAMuB,EAA0B,SAAjBD,EAA0B,QAAU,WAE/D,0BAAM1B,UAAU,UANlB,qFCTS,SAASiC,IAAO,IAAD,EACFC,qBAAWjB,EAASL,GADlB,mBACrBM,EADqB,KACdtB,EADc,OAEM6B,mBAAS,IAFf,mBAErBU,EAFqB,KAEVC,EAFU,KAI5BR,qBAAU,WACRf,aAAawB,QAAQ,QAAStB,KAAKuB,UAAUpB,MAC5C,CAACA,IAYJ,OACE,kBAAC7B,EAAQkD,SAAT,CAAkBC,MAAO,CAAEtB,QAAOtB,aAChC,yBAAKI,UAAU,aACb,yGACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,uBAAGA,UAAU,yBAAb,aACA,2BACEA,UAAU,WACVE,KAAK,OACLsC,MAAOL,EACPM,UAAU,IACVC,UAAU,MACVtC,SAAU,SAACuC,GAAD,OAAWP,EAAaO,EAAMC,OAAOJ,QAC/CK,WAxBM,SAACF,GACG,UAAdA,EAAMhC,KAAmBgC,EAAMC,OAAOJ,MAAMM,QAAU,IACxDlD,EAAS,CACPM,KAAM,MACNG,QAAS8B,IAEXC,EAAa,QAoBT,qHACA,0BACEpC,UAAU,cACV+C,aAAW,oJACXC,eAAa,8EAGjB,kBAAC,EAAD,CAAUxC,MAAOU,M,MCnCL+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAACtB,EAAD,MAASJ,SAAS2B,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.34dc300e.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useContext } from 'react';\nimport { Context } from '../context';\n\nexport default function TodoItem({ title, id, completed }) {\n  const { dispatch } = useContext(Context);\n\n  const cls = ['todo'];\n\n  if (completed) {\n    cls.push('completed');\n  }\n\n  return (\n    <li className={cls.join(' ')}>\n      <label>\n        <input\n          type='checkbox'\n          checked={completed}\n          onChange={() => dispatch({ type: 'toggle', payload: id })}\n        />\n        <span>{title}</span>\n\n        <i\n          className='material-icons red-text'\n          onClick={() => dispatch({ type: 'remove', payload: id })}\n        >\n          delete\n        </i>\n      </label>\n    </li>\n  );\n}\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos }) => {\n  return (\n    <ul>\n      {todos.map((item) => (\n        <TodoItem key={item.id} {...item} />\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","export const initialState =\n  localStorage.getItem('todos') == null ? [] : JSON.parse(localStorage.getItem('todos'));\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [\n        ...state,\n        {\n          id: Date.now(),\n          title: action.payload,\n          completed: false,\n        },\n      ];\n    case 'toggle':\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n    case 'remove':\n      return state.filter((todo) => todo.id !== action.payload);\n    default:\n      return state;\n  }\n}\n","import React, { useEffect, useState } from 'react';\n\nconst ThemeSwitch = () => {\n  const [currentTheme, setTheme] = useState('light');\n\n  useEffect(() => {\n    if (currentTheme === 'dark') {\n      document.querySelector('html').setAttribute('data-theme', 'dark');\n    } else {\n      document.querySelector('html').removeAttribute('data-theme');\n    }\n  });\n\n  return (\n    <div className='switch'>\n      <label>\n        <input\n          type='checkbox'\n          checked={currentTheme === 'dark'}\n          onChange={() => setTheme(currentTheme === 'dark' ? 'light' : 'dark')}\n        />\n        <span className='lever' />\n        Тёмная сторона\n      </label>\n    </div>\n  );\n};\n\nexport default ThemeSwitch;\n","import React, { useState, useEffect, useReducer } from 'react';\nimport TodoList from './components/TodoList';\nimport { Context } from './context';\nimport reducer, { initialState } from './reducer';\nimport ThemeSwitch from './components/ThemeSwitch';\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [todoTitle, setTodoTitle] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(state));\n  }, [state]);\n\n  const addTodo = (event) => {\n    if (event.key === 'Enter' && event.target.value.length >= 3) {\n      dispatch({\n        type: 'add',\n        payload: todoTitle,\n      });\n      setTodoTitle('');\n    }\n  };\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <div className='container'>\n        <h1>Твои проблемы</h1>\n        <ThemeSwitch />\n        <div className='input-field'>\n          <i className='material-icons prefix'>mode_edit</i>\n          <input\n            className='validate'\n            type='text'\n            value={todoTitle}\n            minLength='3'\n            maxLength='120'\n            onChange={(event) => setTodoTitle(event.target.value)}\n            onKeyPress={addTodo}\n          />\n          <label>Чо надо сделать ?</label>\n          <span\n            className='helper-text'\n            data-error='Алло, введи минимум 3 символа!'\n            data-success='Нажми Ввод (Return) (Enter)'\n          />\n        </div>\n        <TodoList todos={state} />\n      </div>\n    </Context.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}